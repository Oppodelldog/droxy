// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	exec "os/exec"

	builder "github.com/Oppodelldog/droxy/dockercommand/builder"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

// AddArgument provides a mock function with given fields: argument
func (_m *Builder) AddArgument(argument string) builder.Builder {
	ret := _m.Called(argument)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(argument)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AddCmdArguments provides a mock function with given fields: arguments
func (_m *Builder) AddCmdArguments(arguments []string) builder.Builder {
	ret := _m.Called(arguments)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func([]string) builder.Builder); ok {
		r0 = rf(arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AddEnvVar provides a mock function with given fields: envVarDeclaration
func (_m *Builder) AddEnvVar(envVarDeclaration string) builder.Builder {
	ret := _m.Called(envVarDeclaration)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(envVarDeclaration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AddGroup provides a mock function with given fields: groupName
func (_m *Builder) AddGroup(groupName string) builder.Builder {
	ret := _m.Called(groupName)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AddLabel provides a mock function with given fields: label
func (_m *Builder) AddLabel(label string) builder.Builder {
	ret := _m.Called(label)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AddLinkMapping provides a mock function with given fields: linkMapping
func (_m *Builder) AddLinkMapping(linkMapping string) builder.Builder {
	ret := _m.Called(linkMapping)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(linkMapping)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AddPortMapping provides a mock function with given fields: portMapping
func (_m *Builder) AddPortMapping(portMapping string) builder.Builder {
	ret := _m.Called(portMapping)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(portMapping)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AddTmpfsMount provides a mock function with given fields: destination
func (_m *Builder) AddTmpfsMount(destination string) builder.Builder {
	ret := _m.Called(destination)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AddVolumeMapping provides a mock function with given fields: volumeMapping
func (_m *Builder) AddVolumeMapping(volumeMapping string) builder.Builder {
	ret := _m.Called(volumeMapping)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(volumeMapping)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// AttachTo provides a mock function with given fields: stream
func (_m *Builder) AttachTo(stream string) builder.Builder {
	ret := _m.Called(stream)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// Build provides a mock function with given fields:
func (_m *Builder) Build() *exec.Cmd {
	ret := _m.Called()

	var r0 *exec.Cmd
	if rf, ok := ret.Get(0).(func() *exec.Cmd); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}

	return r0
}

// SetCommand provides a mock function with given fields: command
func (_m *Builder) SetCommand(command string) builder.Builder {
	ret := _m.Called(command)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetContainerName provides a mock function with given fields: containerName
func (_m *Builder) SetContainerName(containerName string) builder.Builder {
	ret := _m.Called(containerName)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(containerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetContainerUserAndGroup provides a mock function with given fields: userID, groupID
func (_m *Builder) SetContainerUserAndGroup(userID string, groupID string) builder.Builder {
	ret := _m.Called(userID, groupID)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string, string) builder.Builder); ok {
		r0 = rf(userID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetDockerSubCommand provides a mock function with given fields: _a0
func (_m *Builder) SetDockerSubCommand(_a0 string) builder.Builder {
	ret := _m.Called(_a0)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetEntryPoint provides a mock function with given fields: entryPoint
func (_m *Builder) SetEntryPoint(entryPoint string) builder.Builder {
	ret := _m.Called(entryPoint)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(entryPoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetEnvFile provides a mock function with given fields: envFile
func (_m *Builder) SetEnvFile(envFile string) builder.Builder {
	ret := _m.Called(envFile)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(envFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetIP provides a mock function with given fields: ip
func (_m *Builder) SetIP(ip string) builder.Builder {
	ret := _m.Called(ip)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetImageName provides a mock function with given fields: imageName
func (_m *Builder) SetImageName(imageName string) builder.Builder {
	ret := _m.Called(imageName)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetNetwork provides a mock function with given fields: network
func (_m *Builder) SetNetwork(network string) builder.Builder {
	ret := _m.Called(network)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetStdErr provides a mock function with given fields: w
func (_m *Builder) SetStdErr(w io.Writer) builder.Builder {
	ret := _m.Called(w)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(io.Writer) builder.Builder); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetStdIn provides a mock function with given fields: r
func (_m *Builder) SetStdIn(r io.Reader) builder.Builder {
	ret := _m.Called(r)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(io.Reader) builder.Builder); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetStdOut provides a mock function with given fields: w
func (_m *Builder) SetStdOut(w io.Writer) builder.Builder {
	ret := _m.Called(w)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(io.Writer) builder.Builder); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// SetWorkingDir provides a mock function with given fields: workingDir
func (_m *Builder) SetWorkingDir(workingDir string) builder.Builder {
	ret := _m.Called(workingDir)

	var r0 builder.Builder
	if rf, ok := ret.Get(0).(func(string) builder.Builder); ok {
		r0 = rf(workingDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(builder.Builder)
		}
	}

	return r0
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
