# these tests do not work well from unprepared containers, so currently only for local execution
name: droxy functional tests for local execution
testcases:
  - name: test impersonate = true
    steps:
      - script: ./full-feature -c "id -u"
        type: exec
        assertions:
          - result.systemout ShouldEqual {{.DROXY_UID}}
      - script: ./full-feature -c "id -g"
        type: exec
        assertions:
          - result.systemout ShouldEqual {{.DROXY_GID}}

  - name: test workdir = "/tmp/droy-functional-tests/test-dir-host"
    steps:
      - script: ./full-feature -c "pwd"
        type: exec
        assertions:
          - result.systemout ShouldEqual {{.DROXY_HOST_TEST_DIR}}

  - name: test automatically mounting workdir = "/tmp/droxy-functional-tests/test-dir-host"
    steps:
      - script: mkdir -p {{.DROXY_HOST_TEST_DIR}}
      - script: touch {{.DROXY_HOST_TEST_DIR}}/testfile
      - script: DROXY_HOST_TEST_DIR={{.DROXY_HOST_TEST_DIR}} ./full-feature -c "ls testfile | wc -l"
        type: exec
        assertions:
          - result.systemout ShouldEqual 1
          
  - name: test volumes = ["${PWD}:/test-dir"]
    steps:
      - script: touch /tmp/some-file
      - script: ./full-feature -c "ls /test-dir/some-file | wc -l"
        type: exec
        assertions:
          - result.systemout ShouldEqual 1
  
  - name: test volumes = ["${PWD}:/test-dir-from-template"]
    steps:
      - script: touch /tmp/some-file
      - script: ./full-feature -c "ls /test-dir-from-template/some-file | wc -l"
        type: exec
        assertions:
          - result.systemout ShouldEqual 1            

  - name: test envvars = ["TESTVAR=${DROXY_TEST_VAR}"]
    steps:
      - script: ./full-feature -c "env | grep TESTVAR | cut -c 9-"
        type: exec
        assertions:
          - result.systemout ShouldEqual "{{.DROXY_TEST_VAR}}"

  - name: test tmpfs
    steps:
      - script: ./tmpfs -c "stat /tmpfs1"
        type: exec
        assertions:
          - result.code ShouldEqual 0

                    
