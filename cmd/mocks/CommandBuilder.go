// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	config "github.com/Oppodelldog/droxy/config"

	exec "os/exec"

	mock "github.com/stretchr/testify/mock"
)

// CommandBuilder is an autogenerated mock type for the CommandBuilder type
type CommandBuilder struct {
	mock.Mock
}

// BuildCommandFromConfig provides a mock function with given fields: commandDef
func (_m *CommandBuilder) BuildCommandFromConfig(commandDef config.CommandDefinition) (*exec.Cmd, error) {
	ret := _m.Called(commandDef)

	var r0 *exec.Cmd
	var r1 error
	if rf, ok := ret.Get(0).(func(config.CommandDefinition) (*exec.Cmd, error)); ok {
		return rf(commandDef)
	}
	if rf, ok := ret.Get(0).(func(config.CommandDefinition) *exec.Cmd); ok {
		r0 = rf(commandDef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exec.Cmd)
		}
	}

	if rf, ok := ret.Get(1).(func(config.CommandDefinition) error); ok {
		r1 = rf(commandDef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommandBuilder creates a new instance of CommandBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandBuilder {
	mock := &CommandBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
